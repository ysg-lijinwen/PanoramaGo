package com.jointem.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SITE".
*/
public class SiteDao extends AbstractDao<Site, String> {

    public static final String TABLENAME = "SITE";

    /**
     * Properties of entity Site.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Logo = new Property(3, String.class, "logo", false, "LOGO");
        public final static Property Website = new Property(4, String.class, "website", false, "WEBSITE");
        public final static Property Longitude = new Property(5, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(6, double.class, "latitude", false, "LATITUDE");
        public final static Property CategoryName = new Property(7, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryCode = new Property(8, String.class, "categoryCode", false, "CATEGORY_CODE");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Address = new Property(10, String.class, "address", false, "ADDRESS");
        public final static Property Pv = new Property(11, String.class, "pv", false, "PV");
        public final static Property Star = new Property(12, String.class, "star", false, "STAR");
        public final static Property Follow = new Property(13, String.class, "follow", false, "FOLLOW");
        public final static Property Isdefault = new Property(14, boolean.class, "isdefault", false, "ISDEFAULT");
        public final static Property Distance = new Property(15, String.class, "distance", false, "DISTANCE");
        public final static Property Timestamp = new Property(16, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property RefusePushState = new Property(17, String.class, "refusePushState", false, "REFUSE_PUSH_STATE");
    }


    public SiteDao(DaoConfig config) {
        super(config);
    }
    
    public SiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SITE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" TEXT," + // 2: type
                "\"LOGO\" TEXT," + // 3: logo
                "\"WEBSITE\" TEXT," + // 4: website
                "\"LONGITUDE\" REAL NOT NULL ," + // 5: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 6: latitude
                "\"CATEGORY_NAME\" TEXT," + // 7: categoryName
                "\"CATEGORY_CODE\" TEXT," + // 8: categoryCode
                "\"PHONE\" TEXT," + // 9: phone
                "\"ADDRESS\" TEXT," + // 10: address
                "\"PV\" TEXT," + // 11: pv
                "\"STAR\" TEXT," + // 12: star
                "\"FOLLOW\" TEXT," + // 13: follow
                "\"ISDEFAULT\" INTEGER NOT NULL ," + // 14: isdefault
                "\"DISTANCE\" TEXT," + // 15: distance
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 16: timestamp
                "\"REFUSE_PUSH_STATE\" TEXT);"); // 17: refusePushState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Site entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(4, logo);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(5, website);
        }
        stmt.bindDouble(6, entity.getLongitude());
        stmt.bindDouble(7, entity.getLatitude());
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(8, categoryName);
        }
 
        String categoryCode = entity.getCategoryCode();
        if (categoryCode != null) {
            stmt.bindString(9, categoryCode);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String pv = entity.getPv();
        if (pv != null) {
            stmt.bindString(12, pv);
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(13, star);
        }
 
        String follow = entity.getFollow();
        if (follow != null) {
            stmt.bindString(14, follow);
        }
        stmt.bindLong(15, entity.getIsdefault() ? 1L: 0L);
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(16, distance);
        }
        stmt.bindLong(17, entity.getTimestamp());
 
        String refusePushState = entity.getRefusePushState();
        if (refusePushState != null) {
            stmt.bindString(18, refusePushState);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Site entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(4, logo);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(5, website);
        }
        stmt.bindDouble(6, entity.getLongitude());
        stmt.bindDouble(7, entity.getLatitude());
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(8, categoryName);
        }
 
        String categoryCode = entity.getCategoryCode();
        if (categoryCode != null) {
            stmt.bindString(9, categoryCode);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String pv = entity.getPv();
        if (pv != null) {
            stmt.bindString(12, pv);
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(13, star);
        }
 
        String follow = entity.getFollow();
        if (follow != null) {
            stmt.bindString(14, follow);
        }
        stmt.bindLong(15, entity.getIsdefault() ? 1L: 0L);
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(16, distance);
        }
        stmt.bindLong(17, entity.getTimestamp());
 
        String refusePushState = entity.getRefusePushState();
        if (refusePushState != null) {
            stmt.bindString(18, refusePushState);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Site readEntity(Cursor cursor, int offset) {
        Site entity = new Site( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // website
            cursor.getDouble(offset + 5), // longitude
            cursor.getDouble(offset + 6), // latitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // categoryName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // categoryCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pv
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // star
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // follow
            cursor.getShort(offset + 14) != 0, // isdefault
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // distance
            cursor.getLong(offset + 16), // timestamp
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // refusePushState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Site entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWebsite(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLongitude(cursor.getDouble(offset + 5));
        entity.setLatitude(cursor.getDouble(offset + 6));
        entity.setCategoryName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategoryCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPv(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStar(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFollow(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsdefault(cursor.getShort(offset + 14) != 0);
        entity.setDistance(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTimestamp(cursor.getLong(offset + 16));
        entity.setRefusePushState(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Site entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Site entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Site entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
