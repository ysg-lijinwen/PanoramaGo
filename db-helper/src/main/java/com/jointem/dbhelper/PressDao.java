package com.jointem.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRESS".
*/
public class PressDao extends AbstractDao<Press, Long> {

    public static final String TABLENAME = "PRESS";

    /**
     * Properties of entity Press.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Myid = new Property(0, Long.class, "myid", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property MessageTitle = new Property(2, String.class, "messageTitle", false, "MESSAGE_TITLE");
        public final static Property SiteName = new Property(3, String.class, "siteName", false, "SITE_NAME");
        public final static Property MessageLink = new Property(4, String.class, "messageLink", false, "MESSAGE_LINK");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property MessageImage = new Property(6, String.class, "messageImage", false, "MESSAGE_IMAGE");
        public final static Property SiteId = new Property(7, String.class, "siteId", false, "SITE_ID");
        public final static Property State = new Property(8, boolean.class, "state", false, "STATE");
        public final static Property Timestamp = new Property(9, long.class, "timestamp", false, "TIMESTAMP");
    }


    public PressDao(DaoConfig config) {
        super(config);
    }
    
    public PressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: myid
                "\"ID\" TEXT," + // 1: id
                "\"MESSAGE_TITLE\" TEXT," + // 2: messageTitle
                "\"SITE_NAME\" TEXT," + // 3: siteName
                "\"MESSAGE_LINK\" TEXT," + // 4: messageLink
                "\"CREATE_DATE\" TEXT," + // 5: createDate
                "\"MESSAGE_IMAGE\" TEXT," + // 6: messageImage
                "\"SITE_ID\" TEXT," + // 7: siteId
                "\"STATE\" INTEGER NOT NULL ," + // 8: state
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 9: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Press entity) {
        stmt.clearBindings();
 
        Long myid = entity.getMyid();
        if (myid != null) {
            stmt.bindLong(1, myid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String messageTitle = entity.getMessageTitle();
        if (messageTitle != null) {
            stmt.bindString(3, messageTitle);
        }
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(4, siteName);
        }
 
        String messageLink = entity.getMessageLink();
        if (messageLink != null) {
            stmt.bindString(5, messageLink);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String messageImage = entity.getMessageImage();
        if (messageImage != null) {
            stmt.bindString(7, messageImage);
        }
 
        String siteId = entity.getSiteId();
        if (siteId != null) {
            stmt.bindString(8, siteId);
        }
        stmt.bindLong(9, entity.getState() ? 1L: 0L);
        stmt.bindLong(10, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Press entity) {
        stmt.clearBindings();
 
        Long myid = entity.getMyid();
        if (myid != null) {
            stmt.bindLong(1, myid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String messageTitle = entity.getMessageTitle();
        if (messageTitle != null) {
            stmt.bindString(3, messageTitle);
        }
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(4, siteName);
        }
 
        String messageLink = entity.getMessageLink();
        if (messageLink != null) {
            stmt.bindString(5, messageLink);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String messageImage = entity.getMessageImage();
        if (messageImage != null) {
            stmt.bindString(7, messageImage);
        }
 
        String siteId = entity.getSiteId();
        if (siteId != null) {
            stmt.bindString(8, siteId);
        }
        stmt.bindLong(9, entity.getState() ? 1L: 0L);
        stmt.bindLong(10, entity.getTimestamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Press readEntity(Cursor cursor, int offset) {
        Press entity = new Press( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // myid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // messageTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // siteName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // messageLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // messageImage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // siteId
            cursor.getShort(offset + 8) != 0, // state
            cursor.getLong(offset + 9) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Press entity, int offset) {
        entity.setMyid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessageTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSiteName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessageImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSiteId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setState(cursor.getShort(offset + 8) != 0);
        entity.setTimestamp(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Press entity, long rowId) {
        entity.setMyid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Press entity) {
        if(entity != null) {
            return entity.getMyid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Press entity) {
        return entity.getMyid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
