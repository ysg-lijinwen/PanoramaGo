package com.jointem.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORIES".
*/
public class CategoriesDao extends AbstractDao<Categories, Void> {

    public static final String TABLENAME = "CATEGORIES";

    /**
     * Properties of entity Categories.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property CategoryName = new Property(1, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryCode = new Property(2, String.class, "categoryCode", false, "CATEGORY_CODE");
        public final static Property ParentCode = new Property(3, String.class, "parentCode", false, "PARENT_CODE");
    }


    public CategoriesDao(DaoConfig config) {
        super(config);
    }
    
    public CategoriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORIES\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"CATEGORY_NAME\" TEXT," + // 1: categoryName
                "\"CATEGORY_CODE\" TEXT," + // 2: categoryCode
                "\"PARENT_CODE\" TEXT);"); // 3: parentCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORIES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Categories entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(2, categoryName);
        }
 
        String categoryCode = entity.getCategoryCode();
        if (categoryCode != null) {
            stmt.bindString(3, categoryCode);
        }
 
        String parentCode = entity.getParentCode();
        if (parentCode != null) {
            stmt.bindString(4, parentCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Categories entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(2, categoryName);
        }
 
        String categoryCode = entity.getCategoryCode();
        if (categoryCode != null) {
            stmt.bindString(3, categoryCode);
        }
 
        String parentCode = entity.getParentCode();
        if (parentCode != null) {
            stmt.bindString(4, parentCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Categories readEntity(Cursor cursor, int offset) {
        Categories entity = new Categories( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // categoryName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categoryCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // parentCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Categories entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setCategoryName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoryCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Categories entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Categories entity) {
        return null;
    }

    @Override
    public boolean hasKey(Categories entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
