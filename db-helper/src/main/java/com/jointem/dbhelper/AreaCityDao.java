package com.jointem.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_CITY".
*/
public class AreaCityDao extends AbstractDao<AreaCity, Long> {

    public static final String TABLENAME = "AREA_CITY";

    /**
     * Properties of entity AreaCity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ParentId = new Property(2, String.class, "parentId", false, "PARENT_ID");
        public final static Property ShortName = new Property(3, String.class, "shortName", false, "SHORT_NAME");
        public final static Property LevelType = new Property(4, double.class, "levelType", false, "LEVEL_TYPE");
        public final static Property CityCode = new Property(5, String.class, "cityCode", false, "CITY_CODE");
        public final static Property ZipCode = new Property(6, String.class, "zipCode", false, "ZIP_CODE");
        public final static Property MergerName = new Property(7, String.class, "mergerName", false, "MERGER_NAME");
        public final static Property Lng = new Property(8, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(9, String.class, "lat", false, "LAT");
        public final static Property Pinyin = new Property(10, String.class, "pinyin", false, "PINYIN");
    }


    public AreaCityDao(DaoConfig config) {
        super(config);
    }
    
    public AreaCityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PARENT_ID\" TEXT," + // 2: parentId
                "\"SHORT_NAME\" TEXT," + // 3: shortName
                "\"LEVEL_TYPE\" REAL NOT NULL ," + // 4: levelType
                "\"CITY_CODE\" TEXT," + // 5: cityCode
                "\"ZIP_CODE\" TEXT," + // 6: zipCode
                "\"MERGER_NAME\" TEXT," + // 7: mergerName
                "\"LNG\" TEXT," + // 8: lng
                "\"LAT\" TEXT," + // 9: lat
                "\"PINYIN\" TEXT);"); // 10: pinyin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AreaCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(3, parentId);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(4, shortName);
        }
        stmt.bindDouble(5, entity.getLevelType());
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(6, cityCode);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(7, zipCode);
        }
 
        String mergerName = entity.getMergerName();
        if (mergerName != null) {
            stmt.bindString(8, mergerName);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(9, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(10, lat);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(11, pinyin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AreaCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(3, parentId);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(4, shortName);
        }
        stmt.bindDouble(5, entity.getLevelType());
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(6, cityCode);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(7, zipCode);
        }
 
        String mergerName = entity.getMergerName();
        if (mergerName != null) {
            stmt.bindString(8, mergerName);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(9, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(10, lat);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(11, pinyin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AreaCity readEntity(Cursor cursor, int offset) {
        AreaCity entity = new AreaCity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortName
            cursor.getDouble(offset + 4), // levelType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cityCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zipCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mergerName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lng
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lat
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // pinyin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AreaCity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevelType(cursor.getDouble(offset + 4));
        entity.setCityCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZipCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMergerName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLng(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLat(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPinyin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AreaCity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AreaCity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AreaCity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
